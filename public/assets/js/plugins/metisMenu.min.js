/*!
 * metismenu https://github.com/onokumus/metismenu#readme
 * A JavaScript menu plugin
 * @version 3.0.4
 * @author Osman Nuri Okumus <onokumus@gmail.com> (https://github.com/onokumus)
 * @license: MIT 
 */

(function (global, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        // Support CommonJS
        module.exports = factory(require('jquery'));
    } else if (typeof define === 'function' && define.amd) {
        // Support AMD
        define(['jquery'], factory);
    } else {
        // Browser global
        global.metisMenu = factory(global.jQuery);
    }
})(typeof window !== 'undefined' ? window : this, function ($) {
    'use strict';

    // Function to emulate transition end event
    var emulateTransitionEnd = function (duration, callback) {
        setTimeout(callback, duration);
    };

    // Event names
    var transitionEndEvent = 'transitionend';
    var events = {
        TRANSITION_END: 'mmTransitionEnd',
        triggerTransitionEnd: function (element) {
            $(element).trigger(transitionEndEvent);
        },
        supportsTransitionEnd: function () {
            return Boolean(transitionEndEvent);
        }
    };

    // Configuration options and defaults
    var defaults = {
        toggle: true,
        preventDefault: true,
        triggerElement: 'a',
        parentTrigger: 'li',
        subMenu: 'ul'
    };

    // Class names
    var classes = {
        SHOW: 'show',
        SHOWN: 'shown',
        HIDE: 'hide',
        HIDDEN: 'hidden',
        CLICK_DATA_API: 'click.data-api'
    };

    // Plugin name
    var pluginName = 'metisMenu';

    // Plugin constructor
    function MetisMenu(element, config) {
        this.element = element;
        this.config = Object.assign({}, defaults, config);
        this.transitioning = null;
        this.init();
    }

    // Plugin prototype
    MetisMenu.prototype.init = function () {
        var self = this;
        var config = this.config;
        var $element = $(this.element);

        // Add necessary class
        $element.addClass(pluginName);

        // Handle click event on trigger elements
        $element.find(config.parentTrigger + '.' + classes.SHOW).children(config.triggerElement).attr('aria-expanded', true);
        $element.find(config.parentTrigger + '.' + classes.SHOW).parents(config.parentTrigger).addClass(classes.SHOW);
        $element.find(config.parentTrigger + '.' + classes.SHOW).parents(config.parentTrigger).children(config.triggerElement).attr('aria-expanded', true);
        $element.find(config.parentTrigger + '.' + classes.SHOW).has(config.subMenu).children(config.subMenu).addClass(classes.HIDE + ' ' + classes.SHOW);
        $element.find(config.parentTrigger).not('.' + classes.SHOW).has(config.subMenu).children(config.subMenu).addClass(classes.HIDE);

        $element.find(config.parentTrigger).children(config.triggerElement).on(classes.CLICK_DATA_API, function (e) {
            var $target = $(this);

            if ($target.attr('aria-disabled') !== 'true') {
                if (config.preventDefault && $target.attr('href') === '#') {
                    e.preventDefault();
                }

                var $parent = $target.parent(config.parentTrigger);
                var $toggler = $parent.siblings().children(config.triggerElement);

                if ($parent.hasClass(classes.SHOW)) {
                    $target.attr('aria-expanded', false);
                    self.removeActive($parent);
                } else {
                    $target.attr('aria-expanded', true);
                    self.setActive($parent);
                    if (config.toggle) {
                        self.removeActive($parent.siblings());
                        $toggler.attr('aria-expanded', false);
                    }
                }

                if (config.onTransitionStart) {
                    config.onTransitionStart(e);
                }
            }
        });
    };

    MetisMenu.prototype.setActive = function (element) {
        $(element).addClass(classes.SHOW);
        var $subMenu = $(element).children(this.config.subMenu);
        if ($subMenu.length > 0 && !$subMenu.hasClass(classes.SHOW)) {
            this.show($subMenu);
        }
    };

    MetisMenu.prototype.removeActive = function (element) {
        $(element).removeClass(classes.SHOW);
        var $subMenu = $(element).children(this.config.subMenu + '.' + classes.SHOW);
        if ($subMenu.length > 0) {
            this.hide($subMenu);
        }
    };

    MetisMenu.prototype.show = function (element) {
        var self = this;
        if (!this.transitioning && !$(element).hasClass(classes.HIDE)) {
            var $target = $(element);
            var $showElement = $target.addClass(classes.COLLAPSING).removeClass(classes.COLLAPSE).height(0);

            this.transitioning = 1;

            var complete = function () {
                $showElement.removeClass(classes.COLLAPSING).addClass(classes.COLLAPSE + ' ' + classes.SHOW).height('');
                self.transitioning = 0;
            };

            $showElement.height($showElement[0].scrollHeight).one(events.TRANSITION_END, complete);

            emulateTransitionEnd(350, complete);
        }
    };

    MetisMenu.prototype.hide = function (element) {
        var self = this;
        if (!this.transitioning && $(element).hasClass(classes.SHOW)) {
            var $target = $(element);
            var $hideElement = $target.addClass(classes.COLLAPSING).removeClass(classes.SHOW).height($target.height());

            this.transitioning = 1;

            var complete = function () {
                self.transitioning = 0;
                $target.removeClass(classes.COLLAPSING).addClass(classes.COLLAPSE).height('');
            };

            emulateTransitionEnd(350, complete);

            $hideElement.height(0);
        }
    };

    MetisMenu.prototype.dispose = function () {
        $.removeData(this.element, pluginName);
        $(this.element).find(this.config.parentTrigger).has(this.config.subMenu).children(this.config.triggerElement).off(classes.CLICK_DATA_API);
        this.transitioning = null;
        this.config = null;
        this.element = null;
    };

    // jQuery interface
    $.fn[pluginName] = function (config) {
        return this.each(function () {
            var $this = $(this);
            var data = $this.data(pluginName);
            var options = typeof config === 'object' && config;

            if (!data) {
                data = new MetisMenu(this, options);
                $this.data(pluginName, data);
            }

            if (typeof config === 'string') {
                if (typeof data[config] === 'undefined') {
                    throw new Error('No method named "' + config + '"');
                }
                data[config]();
            }
        });
    };

    // No conflict
    $.fn[pluginName].noConflict = function () {
        $.fn[pluginName] = old;
        return this;
    };

    // Data API
    $(window).on('load', function () {
        $(document).find('[data-toggle="metisMenu"]').metisMenu();
    });

    return MetisMenu;
});
